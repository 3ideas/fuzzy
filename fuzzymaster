float e[7];
float de[7];
float u[7];
float d=0;
float f_ke=0.9;
float f_ked=0.7;
float ku=3;

//membership function
float mf_e[7]={-15,-10,-5,0,5,10,15};
float mf_de[7]={-15,-10,-5,0,5,10,15};

//take angle value and look up the value into membership function
void fuzifikasiError(float in_){
  e[0]=0;  e[1]=0;  e[2]=0;  e[3]=0;
  e[4]=0;  e[5]=0;  e[6]=0;
  
  d=5.0;
  
  if(in_<-15){
    e[0]=1.0;
  }else if (in_<-10){
    e[0]=1-(in_+15)/d;
    e[1]=1-(-in_-10)/d;
  }else if (in_<-5){
    e[1]=1-(in_+10)/d;
    e[2]=1-(-in_-5)/d;
  }else if (in_<0){
    e[2]=1-(5+in_)/d;
    e[3]=1-(-in_)/d;
  }else if (in_<5){
    e[3]=1-(in_-0)/d;
    e[4]=1-(5-in_)/d;
  }else if (in_<10){
    e[4]=1-(in_-5)/d;
    e[5]=1-(10-in_)/d;
  }else{
    e[6]=1; 
  }
}

void fuzifikasiDerror(float in_){
  de[0]=0;  de[1]=0;  de[2]=0;  de[3]=0;
  de[4]=0;  de[5]=0;  de[6]=0;

  d=5;
  if (in_<-15){
    de[0]=1.0;
  }else if(in_<-10){
    de[0]=1-(in_+15)/d;
    de[1]=1-(-in_-10)/d;
  }else if(in_<-5){
    de[1]=1-(in_+10)/d;
    de[2]=1-(-in_-5)/d;
  }else if(in_<0){
    de[2]=1-(5+in_)/d;
    de[3]=1-(-in_)/d;
  }else if(in_<5){
    de[3]=1-(in_)/d;
    de[4]=1-(5-in_)/d;
  }else if(in_<10){
    de[4]=1-(in_-5)/d;
    de[5]=1-(10-in_)/d;
  }else{
    de[6]=1;
  }
}

int rule_[7][7]={{0,0,1,1,1,1,3},
                 {0,1,1,1,1,3,5},
                 {1,1,1,2,3,5,5},
                 {1,1,2,3,4,5,5},
                 {1,1,3,4,5,5,6},
                 {1,3,5,5,5,5,6},
                 {3,5,5,5,5,6,6},
                 };

float uk;
void inferensi (){
  int i,j,k;

  u[0]=0;  u[1]=0;  u[2]=0;  u[3]=0;
  u[4]=0;  u[5]=0;  u[6]=0;
  
  for(i=0;  i<7; i++){
    for (j=0;  j<7;  j++){
      k=rule_[i][j];
      u[k]=fmax(u[k],fmin(e[j],de[i]));
      }
    }
  }
  
    
    void defuzi(){
      float pemb,peny;
      float c[7]={-21,-14,-7,0,7,14,21}; //membersip output
      pemb=c[0]*u[0]+c[1]*u[1]+c[2]*u[2]+c[3]*u[3]+c[4]*u[4]+c[5]*u[5]+c[0]*u[0]+c[6]*u[6];
      peny=u[0]+u[1]+u[2]+u[3]+u[4]+u[5]+u[6];
      uk=pemb/peny;
    }
    
    //this below functin for infinite loop
    void FLC(){
      SP=0;
      f_er=(float)0-sudut;
      f_de=f_er-f_er_1;
      f_er_1=f_er;
      
      fuzifikasiError(f_ke*f_er);
      fuzifikasiDerror(f_ked*f_de);
      
      inferensi ();
      defuzi();
      hasil=(float)uk*ku;
      out_put=hasil;
    }
